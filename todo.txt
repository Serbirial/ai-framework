

Offload code gen to specific model / thinker


dont use chat_completetion when doing recursive work so the models state doesnt reset every step (faster if not reset)


implement a web worker that does web based deep research or web based tasks (and add specific tools) 

Optional:
- Add recursive summarization (added summarizer worker which can do this if i implement it right)

IMPORTANT:
  Make API backend for interacting with the AI so the bot/models are seperated (better performance)
  Has to include token streaming
  API wont load the models itself- it only routes a user to an open model and relays everything:
      Each Model instance will have its own API for the main routing API to use and runs its own instance of the `bot.ChatBot`


SUPER SUPER IMPORTANT:
  Make every thinker/worker use low level .generate to keep internal model state (speeds up on recursive generation because it doesnt need to read the full prompt every step)
  ^ Cant feed the full prompt with low level- as the prompt is stored in the cache / remembered with .eval and etc
  DONT EVER feed old prompting.

  In EVERY recursive thinker/worker- if the token window is detected as fully exceeded:
    The worker needs to stop- and summarize everything its done and needs to do to complete the task:
        Use that summary as a response so the user can reply after with 'please finish that' or etc
        NOTE: could add specific category that detects if the user is asking the agent to finish a previous task and add guidance in workers when category is detected (see recursive.py for examples)

  Deep research thinker:
    Long web tasks ("research this topic/ search this up and explain it/ explain topic") -> recursive thinker hooked into selenium / etc

  Add WorkerConfig class that contains all the needed info and limitations per-worker:
    self.tools = [list of tools] (global tools = too much prompt space and can confuse the worker- a worker meant for deep researching the web shouldnt be given access to tools it doesnt need sys or lastfm tols )
    self.tier_data = tier json data (a dict)
